/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SCREEN1VIEWBASE_HPP
#define SCREEN1VIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/containers/scrollers/ScrollList.hpp>
#include <gui/containers/CustomContainer1.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/ModalWindow.hpp>

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

    virtual void scrollListHourUpdateItem(CustomContainer1& item, int16_t itemIndex)
    {
        // Override and implement this function in Screen1
    }

    virtual void scrollListMinUpdateItem(CustomContainer1& item, int16_t itemIndex)
    {
        // Override and implement this function in Screen1
    }

    virtual void scrollListSecUpdateItem(CustomContainer1& item, int16_t itemIndex)
    {
        // Override and implement this function in Screen1
    }
    virtual void handleTickEvent();

    /*
     * Virtual Action Handlers
     */
    virtual void onTick()
    {
        // Override and implement this function in Screen1
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image image1;
    touchgfx::Image image2;
    touchgfx::ScrollList scrollListHour;
    touchgfx::DrawableListItems<CustomContainer1, 2> scrollListHourListItems;
    touchgfx::ScrollList scrollListMin;
    touchgfx::DrawableListItems<CustomContainer1, 2> scrollListMinListItems;
    touchgfx::ScrollList scrollListSec;
    touchgfx::DrawableListItems<CustomContainer1, 2> scrollListSecListItems;
    touchgfx::TextArea textArea2_2;
    touchgfx::TextArea textArea2_1;
    touchgfx::TextArea textArea2;
    touchgfx::ButtonWithLabel buttonWithLabel2;
    touchgfx::ButtonWithLabel buttonWithLabel1;
    touchgfx::TextAreaWithOneWildcard textAreaDay;
    touchgfx::ModalWindow modalWindow1;
    touchgfx::TextArea textArea3;
    touchgfx::ButtonWithLabel buttonWithLabelYes;
    touchgfx::ButtonWithLabel buttonWithLabelNo;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEXTAREADAY_SIZE = 10;
    touchgfx::Unicode::UnicodeChar textAreaDayBuffer[TEXTAREADAY_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<Screen1ViewBase, touchgfx::DrawableListItemsInterface*, int16_t, int16_t> updateItemCallback;
    touchgfx::Callback<Screen1ViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex);
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

    /*
     * Tick Counter Declarations
     */
    static const uint32_t TICK_ONTICK_INTERVAL = 6;
    uint32_t frameCountOnTickInterval;

};

#endif // SCREEN1VIEWBASE_HPP
